swagger: '2.0'
info:
  description: |
    Documentation on ObjectID API Endpoints
    '*' = Optional parameter
  version: 1.0.0
  title: ObjectID Backend API
  termsOfService: http://swagger.io/terms/
  contact:
    email: ctrl.intelligence@gmail.com
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: Vehicle
  description: Endpoints related to vehicles
  # externalDocs:
  #   description: Find out more
  #   url: http://swagger.io
- name: Camera
  description: Access to System from camera perspective
- name: user
  description: Operations about user
  # externalDocs:
  #   description: Find out more about our store
  #   url: http://swagger.io
- name: business
  description: Business related operations
# schemes:
# - http
paths:
  /vehicle/get_vehicle:
    post:
      tags:
      - Vehicle
      summary: Fetch a vehicle object with specified id
      operationId: get_vehicle
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: license_plate
        description: Get a vehicle with a specific license plate
        required: true
        schema:
          type: object
          properties:
            license_plate:
              type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Vehicle'
  /vehicle/search_advanced:
    post:
      tags:
      - Vehicle
      summary: Find vehicles by filters
      operationId: search_advanced
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: Type of search to perform
        required: true
        schema:
          type: object
          properties:
            type:
              type: string
              enum:
              - and
              - or
            filter:
              type: object
              properties:
                make*:
                  type: string
                model*:
                  type: string
                color*:
                  type: string
                license_plate*:
                  type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Vehicle'
  /vehicle/search:
    post:
      tags:
      - Vehicle
      summary: search with keywords
      description: Search for vehicles with a keyword
      operationId: search
      consumes:
      - application/json
      produces: 
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            search:
              type: string
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                $ref: '#/definitions/Vehicle'
  /vehicle/file_recognize:
    post:
      tags:
      - Vehicle
      summary: Run recognition over an image
      description: Run recognition over an uploaded image
      operationId: file_recognize
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            file:
              type: string
              enum:
              - file
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                $ref: '#/definitions/Vehicle'
  /vehicle/get_saps_flagged:
    post:
      tags:
      - Vehicle
      summary: Returns all saps flagged vehicles spotted
      description: Returns all saps flagged vehicles spotted
      operationId: get_saps_flagged
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                type: array
                items:
                  $ref: '#/definitions/Vehicle'
  /vehicle/get_duplicates:
    post:
      tags:
      - Vehicle
      summary: Returns all duplicate vehicles spotted
      description: Returns all duplicate vehicles spotted
      operationId: get_duplicates
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                type: array
                items:
                  $ref: '#/definitions/Vehicle'
  /vehicle/add_marked_vehicle:
    post:
      tags:
      - Vehicle
      summary: Flags a license_plate
      description: Flags a license plate
      operationId: add_marked_vehicle
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            license_plate:
              type: string
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
  /vehicle/get_marked_vehicles:
    post:
      tags:
      - Vehicle
      summary: Returns all marked vehicles
      description: Returns all marked vehicles
      operationId: get_marked_vehicles
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                type: array
                items:
                  $ref: '#/definitions/Vehicle'
  /vehicle/remove_marked_vehicle:
    post:
      tags:
      - Vehicle
      summary: Unflags a license_plate
      description: Unflags a license plate
      operationId: remove_marked_vehicle
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            license_plate:
              type: string
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
  /vehicle/edit_vehicle:
    post:
      tags:
      - Vehicle
      summary: Edits a vehicle
      description: Edits a vehicle
      operationId: edit_vehicle
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            license_plate:
              type: string
            make*:
              type: string
            model*:
              type: string
            color*:
              type: string
            license_plate_duplicate*:
              type: boolean
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                $ref: '#/definitions/Vehicle'
  /vehicle/get_vehicle_locations:
    post:
      tags:
      - Vehicle
      summary: Get vehicle locations
      description: Get vehicle locations
      operationId: get_vehicle_locations
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            license_plate:
              type: string
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              success:
                type: boolean
              payload:
                type: array
                items:
                  type: object
                  properties:
                    vehicle_id:
                      type: number
                    license_plate:
                      type: string
                    tracking:
                      type: array
                      items:
                        type: object
                        properties:
                          vehicle:
                            type: number
                          date:
                            type: string
                          lat:
                            type: number
                          long:
                            type: number
                          camera:
                            type: number
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
      - application/json
      - application/xml
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a pet
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the pet
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1.0
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Vehicle:
    type: object
    properties:
      license_plate:
        type: string
      make:
        type: string
      model:
        type: string
      color:
        type: string
      saps_flagged:
        type: boolean
      license_plate_duplicate:
        type: boolean
  MarkedVehicle:
    type: object
    properties:
      license_plate:
        type: string
      marked_by:
        type: object
  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      email:
        type: string
      password:
        type: string
  Camera:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      lat:
        type: number
      long:
        type: number
      unique_key:
        type: string
  VehicleLog:
    type: object
    properties:
      id:
        type: integer
      date:
        type: string
      lat:
        type: number
      long:
        type: number
      camera:
        type: object
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /ctrlintelligence/ObjectID/1.0.0
schemes:
 - https
 - http